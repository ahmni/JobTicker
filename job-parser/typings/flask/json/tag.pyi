"""
This type stub file was generated by pyright.
"""

"""
Tagged JSON
~~~~~~~~~~~

A compact representation for lossless serialization of non-standard JSON types.
:class:`~flask.sessions.SecureCookieSessionInterface` uses this to serialize
the session data, but it may be useful in other places. It can be extended to
support other types.

.. autoclass:: TaggedJSONSerializer
    :members:

.. autoclass:: JSONTag
    :members:

Let's seen an example that adds support for :class:`~collections.OrderedDict`.
Dicts don't have an order in Python or JSON, so to handle this we will dump
the items as a list of ``[key, value]`` pairs. Subclass :class:`JSONTag` and
give it the new key ``' od'`` to identify the type. The session serializer
processes dicts first, so insert the new tag at the front of the order since
``OrderedDict`` must be processed before ``dict``. ::

    from flask.json.tag import JSONTag

    class TagOrderedDict(JSONTag):
        __slots__ = ('serializer',)
        key = ' od'

        def check(self, value):
            return isinstance(value, OrderedDict)

        def to_json(self, value):
            return [[k, self.serializer.tag(v)] for k, v in iteritems(value)]

        def to_python(self, value):
            return OrderedDict(value)

    app.session_interface.serializer.register(TagOrderedDict, index=0)

:copyright: 2010 Pallets
:license: BSD-3-Clause
"""
class JSONTag:
    """Base class for defining type tags for :class:`TaggedJSONSerializer`."""
    __slots__ = ...
    key = ...
    def __init__(self, serializer) -> None:
        """Create a tagger for the given serializer."""
        ...
    
    def check(self, value):
        """Check if the given value should be tagged by this tag."""
        ...
    
    def to_json(self, value):
        """Convert the Python object to an object that is a valid JSON type.
        The tag will be added later."""
        ...
    
    def to_python(self, value):
        """Convert the JSON representation back to the correct type. The tag
        will already be removed."""
        ...
    
    def tag(self, value): # -> dict[None, Unknown]:
        """Convert the value to a valid JSON type and add the tag structure
        around it."""
        ...
    


class TagDict(JSONTag):
    """Tag for 1-item dicts whose only key matches a registered tag.

    Internally, the dict key is suffixed with `__`, and the suffix is removed
    when deserializing.
    """
    __slots__ = ...
    key = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value): # -> dict[Unknown, Unknown]:
        ...
    
    def to_python(self, value): # -> dict[Unknown, Unknown]:
        ...
    


class PassDict(JSONTag):
    __slots__ = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value): # -> dict[Unknown, Unknown]:
        ...
    
    tag = ...


class TagTuple(JSONTag):
    __slots__ = ...
    key = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value): # -> list[Unknown]:
        ...
    
    def to_python(self, value): # -> tuple[Unknown, ...]:
        ...
    


class PassList(JSONTag):
    __slots__ = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value): # -> list[Unknown]:
        ...
    
    tag = ...


class TagBytes(JSONTag):
    __slots__ = ...
    key = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value): # -> str:
        ...
    
    def to_python(self, value): # -> bytes:
        ...
    


class TagMarkup(JSONTag):
    """Serialize anything matching the :class:`~flask.Markup` API by
    having a ``__html__`` method to the result of that method. Always
    deserializes to an instance of :class:`~flask.Markup`."""
    __slots__ = ...
    key = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value):
        ...
    
    def to_python(self, value): # -> Markup:
        ...
    


class TagUUID(JSONTag):
    __slots__ = ...
    key = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value):
        ...
    
    def to_python(self, value): # -> UUID:
        ...
    


class TagDateTime(JSONTag):
    __slots__ = ...
    key = ...
    def check(self, value): # -> bool:
        ...
    
    def to_json(self, value): # -> str:
        ...
    
    def to_python(self, value): # -> datetime | None:
        ...
    


class TaggedJSONSerializer:
    """Serializer that uses a tag system to compactly represent objects that
    are not JSON types. Passed as the intermediate serializer to
    :class:`itsdangerous.Serializer`.

    The following extra types are supported:

    * :class:`dict`
    * :class:`tuple`
    * :class:`bytes`
    * :class:`~flask.Markup`
    * :class:`~uuid.UUID`
    * :class:`~datetime.datetime`
    """
    __slots__ = ...
    default_tags = ...
    def __init__(self) -> None:
        ...
    
    def register(self, tag_class, force=..., index=...): # -> None:
        """Register a new tag with this serializer.

        :param tag_class: tag class to register. Will be instantiated with this
            serializer instance.
        :param force: overwrite an existing tag. If false (default), a
            :exc:`KeyError` is raised.
        :param index: index to insert the new tag in the tag order. Useful when
            the new tag is a special case of an existing tag. If ``None``
            (default), the tag is appended to the end of the order.

        :raise KeyError: if the tag key is already registered and ``force`` is
            not true.
        """
        ...
    
    def tag(self, value):
        """Convert a value to a tagged representation if necessary."""
        ...
    
    def untag(self, value):
        """Convert a tagged representation back to the original type."""
        ...
    
    def dumps(self, value): # -> Any:
        """Tag the value and dump it to a compact JSON string."""
        ...
    
    def loads(self, value): # -> Any:
        """Load data from a JSON string and deserialized any tagged objects."""
        ...
    


